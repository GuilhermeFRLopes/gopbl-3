// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// GerenciadorPostosPagamento is an auto generated low-level Go binding around an user-defined struct.
type GerenciadorPostosPagamento struct {
	IdPosto   string
	Veiculo   common.Address
	Valor     *big.Int
	Timestamp *big.Int
}

// GerenciadorPostosPosto is an auto generated low-level Go binding around an user-defined struct.
type GerenciadorPostosPosto struct {
	Id                string
	Nome              string
	Cidade            string
	Proprietario      common.Address
	Disponivel        bool
	UltimaAtualizacao *big.Int
	VeiculoReservador common.Address
}

// GerenciadorPostosRecarga is an auto generated low-level Go binding around an user-defined struct.
type GerenciadorPostosRecarga struct {
	IdPosto   string
	Veiculo   common.Address
	KWh       *big.Int
	Valor     *big.Int
	Timestamp *big.Int
}

// GerenciadorPostosReserva is an auto generated low-level Go binding around an user-defined struct.
type GerenciadorPostosReserva struct {
	IdPosto   string
	Veiculo   common.Address
	Timestamp *big.Int
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"empresa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"motivo\",\"type\":\"string\"}],\"name\":\"DisputaAberta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vencedora\",\"type\":\"address\"}],\"name\":\"DisputaResolvida\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PagamentoEfetuado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proprietario\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cidade\",\"type\":\"string\"}],\"name\":\"PostoCadastrado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kWh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RecargaEfetuada\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReservaEfetuada\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"empresa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"aFavor\",\"type\":\"bool\"}],\"name\":\"VotoRegistrado\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idPosto\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_motivo\",\"type\":\"string\"}],\"name\":\"abrirDisputa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_cidade\",\"type\":\"string\"}],\"name\":\"cadastrarPosto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idPosto\",\"type\":\"string\"}],\"name\":\"consultarDisputa\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"empresaRequerente\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"motivo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votosAFavor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votosContra\",\"type\":\"uint256\"},{\"internalType\":\"enumGerenciadorPostos.StatusDisputa\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"vencedora\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"votantes\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consultarHistoricoPagamentos\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structGerenciadorPostos.Pagamento[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consultarHistoricoRecargas\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"kWh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structGerenciadorPostos.Recarga[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consultarHistoricoReservas\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structGerenciadorPostos.Reserva[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"consultarPosto\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cidade\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proprietario\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"disponivel\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ultimaAtualizacao\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"veiculoReservador\",\"type\":\"address\"}],\"internalType\":\"structGerenciadorPostos.Posto\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_empresa\",\"type\":\"address\"}],\"name\":\"consultarPostosPorEmpresa\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consultarTodosPostos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"disputas\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"empresaRequerente\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"motivo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votosAFavor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votosContra\",\"type\":\"uint256\"},{\"internalType\":\"enumGerenciadorPostos.StatusDisputa\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"vencedora\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicoPagamentos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicoRecargas\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"kWh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicoReservas\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"idPosto\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"veiculo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"liberarPosto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listaDisputas\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listaIdsPostos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"postos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cidade\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proprietario\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"disponivel\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ultimaAtualizacao\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"veiculoReservador\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postosPorEmpresa\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_valor\",\"type\":\"uint256\"}],\"name\":\"registrarPagamento\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_kWh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valor\",\"type\":\"uint256\"}],\"name\":\"registrarRecarga\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"reservarPosto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idPosto\",\"type\":\"string\"}],\"name\":\"resolverDisputa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idPosto\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"aFavor\",\"type\":\"bool\"}],\"name\":\"votarDisputa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b506147b58061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061014b575f3560e01c80638b4aefc4116100c1578063d2db16ea1161007a578063d2db16ea146103fd578063dad5249914610419578063eb7dfb8614610435578063f5038c4c14610469578063f840e7ed14610485578063f86781bf146104b55761014b565b80638b4aefc4146102f6578063b6447c4914610326578063bb5f956f1461035c578063c1c8b6fc1461037a578063c74274c614610396578063d0cf186e146103c65761014b565b806362c1621b1161011357806362c1621b1461020b5780637591ef801461023b5780637ffbced51461025957806383acafd91461027557806387b7e50b14610291578063883ee61f146102c35761014b565b8063092622ec1461014f5780631f4d270f1461017f57806331444b701461019b578063316abb1f146101d157806343b0c1bf146101ef575b5f5ffd5b61016960048036038101906101649190612e87565b6104d3565b6040516101769190612fdd565b60405180910390f35b61019960048036038101906101949190613129565b6105e4565b005b6101b560048036038101906101b0919061319f565b61086c565b6040516101c897969594939291906132c8565b60405180910390f35b6101d9610a18565b6040516101e69190613469565b60405180910390f35b6102096004803603810190610204919061319f565b610b62565b005b610225600480360381019061022091906134b3565b610df4565b60405161023291906134f1565b60405180910390f35b610243610ea5565b604051610250919061362c565b60405180910390f35b610273600480360381019061026e919061319f565b610ff9565b005b61028f600480360381019061028a919061364c565b611240565b005b6102ab60048036038101906102a691906136f0565b611504565b6040516102ba9392919061371b565b60405180910390f35b6102dd60048036038101906102d891906136f0565b6115de565b6040516102ed9493929190613757565b60405180910390f35b610310600480360381019061030b91906136f0565b6116be565b60405161031d91906134f1565b60405180910390f35b610340600480360381019061033b919061319f565b611764565b60405161035397969594939291906137bb565b60405180910390f35b610364611996565b6040516103719190612fdd565b60405180910390f35b610394600480360381019061038f919061383d565b611a6a565b005b6103b060048036038101906103ab91906136f0565b611d02565b6040516103bd91906134f1565b60405180910390f35b6103e060048036038101906103db919061319f565b611da8565b6040516103f498979695949392919061393f565b60405180910390f35b610417600480360381019061041291906139fa565b611ff7565b005b610433600480360381019061042e9190613a54565b6122b7565b005b61044f600480360381019061044a91906136f0565b612562565b604051610460959493929190613ac0565b60405180910390f35b610483600480360381019061047e919061319f565b612648565b005b61049f600480360381019061049a919061319f565b6128b1565b6040516104ac9190613bce565b60405180910390f35b6104bd612bd3565b6040516104ca9190613d1c565b60405180910390f35b606060025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156105d9578382905f5260205f2001805461054e90613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461057a90613d69565b80156105c55780601f1061059c576101008083540402835291602001916105c5565b820191905f5260205f20905b8154815290600101906020018083116105a857829003601f168201915b505050505081526020019060010190610531565b505050509050919050565b5f5f836040516105f49190613dd3565b90815260200160405180910390205f01805461060f90613d69565b905011610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064890613e33565b60405180910390fd5b6001600281111561066557610664613255565b5b6006836040516106759190613dd3565b90815260200160405180910390206005015f9054906101000a900460ff1660028111156106a5576106a4613255565b5b036106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc90613ec1565b60405180910390fd5b5f6006836040516106f69190613dd3565b9081526020016040518091039020905082815f019081610716919061407f565b5033816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508181600201908161076a919061407f565b505f81600301819055505f81600401819055506001816005015f6101000a81548160ff021916908360028111156107a4576107a3613255565b5b02179055505f816008015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806007015f6107fa9190612d7c565b600783908060018154018082558091505060019003905f5260205f20015f90919091909150908161082b919061407f565b507f3406be2b10f8255da09d553edbbb31f9b76da2fd745f766bfb8cba24b42b02f883338460405161085f9392919061414e565b60405180910390a1505050565b6006818051602081018201805184825260208301602085012081835280955050505050505f91509050805f0180546108a390613d69565b80601f01602080910402602001604051908101604052809291908181526020018280546108cf90613d69565b801561091a5780601f106108f15761010080835404028352916020019161091a565b820191905f5260205f20905b8154815290600101906020018083116108fd57829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805461095490613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461098090613d69565b80156109cb5780601f106109a2576101008083540402835291602001916109cb565b820191905f5260205f20905b8154815290600101906020018083116109ae57829003601f168201915b505050505090806003015490806004015490806005015f9054906101000a900460ff1690806008015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905087565b60606003805480602002602001604051908101604052809291908181526020015f905b82821015610b59578382905f5260205f2090600302016040518060600160405290815f82018054610a6b90613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9790613d69565b8015610ae25780601f10610ab957610100808354040283529160200191610ae2565b820191905f5260205f20905b815481529060010190602001808311610ac557829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505081526020019060010190610a3b565b50505050905090565b5f5f82604051610b729190613dd3565b90815260200160405180910390205f018054610b8d90613d69565b905011610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690613e33565b60405180910390fd5b5f81604051610bde9190613dd3565b908152602001604051809103902060030160149054906101000a900460ff16610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c33906141db565b60405180910390fd5b5f5f82604051610c4c9190613dd3565b908152602001604051809103902060030160146101000a81548160ff021916908315150217905550335f82604051610c849190613dd3565b90815260200160405180910390206005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550425f82604051610ce29190613dd3565b908152602001604051809103902060040181905550600360405180606001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815250908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f019081610d63919061407f565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015550507f5e6a0be3baaa655cb9a65db88f036775a36c113ca096aabba02559a148e13568813342604051610de99392919061371b565b60405180910390a150565b6002602052815f5260405f208181548110610e0d575f80fd5b905f5260205f20015f91509150508054610e2690613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5290613d69565b8015610e9d5780601f10610e7457610100808354040283529160200191610e9d565b820191905f5260205f20905b815481529060010190602001808311610e8057829003601f168201915b505050505081565b60606005805480602002602001604051908101604052809291908181526020015f905b82821015610ff0578382905f5260205f2090600402016040518060800160405290815f82018054610ef890613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2490613d69565b8015610f6f5780601f10610f4657610100808354040283529160200191610f6f565b820191905f5260205f20905b815481529060010190602001808311610f5257829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505081526020019060010190610ec8565b50505050905090565b5f5f826040516110099190613dd3565b90815260200160405180910390205f01805461102490613d69565b905011611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90613e33565b60405180910390fd5b5f816040516110759190613dd3565b908152602001604051809103902060030160149054906101000a900460ff16156110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb90614243565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff165f826040516110fa9190613dd3565b90815260200160405180910390206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611181576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611178906142d1565b60405180910390fd5b60015f826040516111929190613dd3565b908152602001604051809103902060030160146101000a81548160ff0219169083151502179055505f5f826040516111ca9190613dd3565b90815260200160405180910390206005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550425f826040516112289190613dd3565b90815260200160405180910390206004018190555050565b5f5f846040516112509190613dd3565b90815260200160405180910390205f01805461126b90613d69565b9050146112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490614339565b60405180910390fd5b6040518060e001604052808481526020018381526020018281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020014281526020015f73ffffffffffffffffffffffffffffffffffffffff168152505f8460405161131e9190613dd3565b90815260200160405180910390205f820151815f01908161133f919061407f565b506020820151816001019081611355919061407f565b50604082015181600201908161136b919061407f565b506060820151816003015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff02191690831515021790555060a0820151816004015560c0820151816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600183908060018154018082558091505060019003905f5260205f20015f909190919091509081611456919061407f565b5060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2083908060018154018082558091505060019003905f5260205f20015f9091909190915090816114c3919061407f565b507f2dcdb6b8b883bf6620c7713e0471005e041dc64c299618596a0b98c32f8e3eff8333836040516114f79392919061414e565b60405180910390a1505050565b60038181548110611513575f80fd5b905f5260205f2090600302015f91509050805f01805461153290613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461155e90613d69565b80156115a95780601f10611580576101008083540402835291602001916115a9565b820191905f5260205f20905b81548152906001019060200180831161158c57829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b600581815481106115ed575f80fd5b905f5260205f2090600402015f91509050805f01805461160c90613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461163890613d69565b80156116835780601f1061165a57610100808354040283529160200191611683565b820191905f5260205f20905b81548152906001019060200180831161166657829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154905084565b600181815481106116cd575f80fd5b905f5260205f20015f9150905080546116e590613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461171190613d69565b801561175c5780601f106117335761010080835404028352916020019161175c565b820191905f5260205f20905b81548152906001019060200180831161173f57829003601f168201915b505050505081565b5f818051602081018201805184825260208301602085012081835280955050505050505f91509050805f01805461179a90613d69565b80601f01602080910402602001604051908101604052809291908181526020018280546117c690613d69565b80156118115780601f106117e857610100808354040283529160200191611811565b820191905f5260205f20905b8154815290600101906020018083116117f457829003601f168201915b50505050509080600101805461182690613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461185290613d69565b801561189d5780601f106118745761010080835404028352916020019161189d565b820191905f5260205f20905b81548152906001019060200180831161188057829003601f168201915b5050505050908060020180546118b290613d69565b80601f01602080910402602001604051908101604052809291908181526020018280546118de90613d69565b80156119295780601f1061190057610100808354040283529160200191611929565b820191905f5260205f20905b81548152906001019060200180831161190c57829003601f168201915b505050505090806003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900460ff1690806004015490806005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905087565b60606001805480602002602001604051908101604052809291908181526020015f905b82821015611a61578382905f5260205f200180546119d690613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0290613d69565b8015611a4d5780601f10611a2457610100808354040283529160200191611a4d565b820191905f5260205f20905b815481529060010190602001808311611a3057829003601f168201915b5050505050815260200190600101906119b9565b50505050905090565b5f5f83604051611a7a9190613dd3565b90815260200160405180910390205f018054611a9590613d69565b905011611ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ace90613e33565b60405180910390fd5b5f82604051611ae69190613dd3565b908152602001604051809103902060030160149054906101000a900460ff1615611b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3c906143a1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff165f83604051611b6b9190613dd3565b90815260200160405180910390206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be99061442f565b60405180910390fd5b600560405180608001604052808481526020013373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815250908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f820151815f019081611c64919061407f565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015550507ff2df8d701c4e00f65e958e83eddd065bee4955ef3901c23a55841fbac160367382338342604051611cf69493929190613757565b60405180910390a15050565b60078181548110611d11575f80fd5b905f5260205f20015f915090508054611d2990613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5590613d69565b8015611da05780601f10611d7757610100808354040283529160200191611da0565b820191905f5260205f20905b815481529060010190602001808311611d8357829003601f168201915b505050505081565b60605f60605f5f5f5f60605f60068a604051611dc49190613dd3565b90815260200160405180910390209050805f01816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020183600301548460040154856005015f9054906101000a900460ff16866008015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600701878054611e4e90613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7a90613d69565b8015611ec55780601f10611e9c57610100808354040283529160200191611ec5565b820191905f5260205f20905b815481529060010190602001808311611ea857829003601f168201915b50505050509750858054611ed890613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0490613d69565b8015611f4f5780601f10611f2657610100808354040283529160200191611f4f565b820191905f5260205f20905b815481529060010190602001808311611f3257829003601f168201915b5050505050955080805480602002602001604051908101604052809291908181526020018280548015611fd457602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f8b575b505050505090509850985098509850985098509850985050919395975091939597565b6001600281111561200b5761200a613255565b5b60068360405161201b9190613dd3565b90815260200160405180910390206005015f9054906101000a900460ff16600281111561204b5761204a613255565b5b1461208b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208290614497565b60405180910390fd5b61209433612d31565b6120d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ca90614525565b60405180910390fd5b5f6006836040516120e49190613dd3565b90815260200160405180910390209050806006015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121779061458d565b60405180910390fd5b6001816006015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508060070133908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550811561225d57806003015f815480929190612253906145d8565b9190505550612277565b806004015f815480929190612271906145d8565b91905055505b7ff0c5fd6052921978ad64f5282f7ca2d5e533f64f2850471e28c1db8291409e108333846040516122aa9392919061461f565b60405180910390a1505050565b5f5f846040516122c79190613dd3565b90815260200160405180910390205f0180546122e290613d69565b905011612324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231b90613e33565b60405180910390fd5b5f836040516123339190613dd3565b908152602001604051809103902060030160149054906101000a900460ff1615612392576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612389906143a1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff165f846040516123b89190613dd3565b90815260200160405180910390206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461243f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612436906146cb565b60405180910390fd5b60046040518060a001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200142815250908060018154018082558091505060019003905f5260205f2090600502015f909190919091505f820151815f0190816124b7919061407f565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015550507f796c3a4cbcc3d6ac47dc3f1886fb70e97b9a38e42bf7e9ca31a7e355d62ef9e58333848442604051612555959493929190613ac0565b60405180910390a1505050565b60048181548110612571575f80fd5b905f5260205f2090600502015f91509050805f01805461259090613d69565b80601f01602080910402602001604051908101604052809291908181526020018280546125bc90613d69565b80156126075780601f106125de57610100808354040283529160200191612607565b820191905f5260205f20905b8154815290600101906020018083116125ea57829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905085565b5f6006826040516126599190613dd3565b908152602001604051809103902090506001600281111561267d5761267c613255565b5b816005015f9054906101000a900460ff1660028111156126a05761269f613255565b5b146126e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d790614497565b60405180910390fd5b5f816007018054905011612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272090614733565b60405180910390fd5b8060040154816003015411156127a357806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816008015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612825565b5f826040516127b29190613dd3565b90815260200160405180910390206003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816008015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6002816005015f6101000a81548160ff0219169083600281111561284c5761284b613255565b5b02179055507f5dfcf6fccb13b5f3c9ed40212994cba89bf89f46cdd3b4a7f45e7e45e673700e82826008015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516128a5929190614751565b60405180910390a15050565b6128b9612d9a565b5f5f836040516128c99190613dd3565b90815260200160405180910390205f0180546128e490613d69565b905011612926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291d90613e33565b60405180910390fd5b5f826040516129359190613dd3565b90815260200160405180910390206040518060e00160405290815f8201805461295d90613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461298990613d69565b80156129d45780601f106129ab576101008083540402835291602001916129d4565b820191905f5260205f20905b8154815290600101906020018083116129b757829003601f168201915b505050505081526020016001820180546129ed90613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054612a1990613d69565b8015612a645780601f10612a3b57610100808354040283529160200191612a64565b820191905f5260205f20905b815481529060010190602001808311612a4757829003601f168201915b50505050508152602001600282018054612a7d90613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054612aa990613d69565b8015612af45780601f10612acb57610100808354040283529160200191612af4565b820191905f5260205f20905b815481529060010190602001808311612ad757829003601f168201915b50505050508152602001600382015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1615151515815260200160048201548152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60606004805480602002602001604051908101604052809291908181526020015f905b82821015612d28578382905f5260205f2090600502016040518060a00160405290815f82018054612c2690613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054612c5290613d69565b8015612c9d5780601f10612c7457610100808354040283529160200191612c9d565b820191905f5260205f20905b815481529060010190602001808311612c8057829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505081526020019060010190612bf6565b50505050905090565b5f5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080549050119050919050565b5080545f8255905f5260205f2090810190612d979190612e01565b50565b6040518060e001604052806060815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f151581526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5b80821115612e18575f815f905550600101612e02565b5090565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612e5682612e2d565b9050919050565b612e6681612e4c565b8114612e70575f5ffd5b50565b5f81359050612e8181612e5d565b92915050565b5f60208284031215612e9c57612e9b612e25565b5b5f612ea984828501612e73565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f612f1d82612edb565b612f278185612ee5565b9350612f37818560208601612ef5565b612f4081612f03565b840191505092915050565b5f612f568383612f13565b905092915050565b5f602082019050919050565b5f612f7482612eb2565b612f7e8185612ebc565b935083602082028501612f9085612ecc565b805f5b85811015612fcb5784840389528151612fac8582612f4b565b9450612fb783612f5e565b925060208a01995050600181019050612f93565b50829750879550505050505092915050565b5f6020820190508181035f830152612ff58184612f6a565b905092915050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61303b82612f03565b810181811067ffffffffffffffff8211171561305a57613059613005565b5b80604052505050565b5f61306c612e1c565b90506130788282613032565b919050565b5f67ffffffffffffffff82111561309757613096613005565b5b6130a082612f03565b9050602081019050919050565b828183375f83830152505050565b5f6130cd6130c88461307d565b613063565b9050828152602081018484840111156130e9576130e8613001565b5b6130f48482856130ad565b509392505050565b5f82601f8301126131105761310f612ffd565b5b81356131208482602086016130bb565b91505092915050565b5f5f6040838503121561313f5761313e612e25565b5b5f83013567ffffffffffffffff81111561315c5761315b612e29565b5b613168858286016130fc565b925050602083013567ffffffffffffffff81111561318957613188612e29565b5b613195858286016130fc565b9150509250929050565b5f602082840312156131b4576131b3612e25565b5b5f82013567ffffffffffffffff8111156131d1576131d0612e29565b5b6131dd848285016130fc565b91505092915050565b5f82825260208201905092915050565b5f61320082612edb565b61320a81856131e6565b935061321a818560208601612ef5565b61322381612f03565b840191505092915050565b61323781612e4c565b82525050565b5f819050919050565b61324f8161323d565b82525050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003811061329357613292613255565b5b50565b5f8190506132a382613282565b919050565b5f6132b282613296565b9050919050565b6132c2816132a8565b82525050565b5f60e0820190508181035f8301526132e0818a6131f6565b90506132ef602083018961322e565b818103604083015261330181886131f6565b90506133106060830187613246565b61331d6080830186613246565b61332a60a08301856132b9565b61333760c083018461322e565b98975050505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61337581612e4c565b82525050565b6133848161323d565b82525050565b5f606083015f8301518482035f8601526133a48282612f13565b91505060208301516133b9602086018261336c565b5060408301516133cc604086018261337b565b508091505092915050565b5f6133e2838361338a565b905092915050565b5f602082019050919050565b5f61340082613343565b61340a818561334d565b93508360208202850161341c8561335d565b805f5b85811015613457578484038952815161343885826133d7565b9450613443836133ea565b925060208a0199505060018101905061341f565b50829750879550505050505092915050565b5f6020820190508181035f83015261348181846133f6565b905092915050565b6134928161323d565b811461349c575f5ffd5b50565b5f813590506134ad81613489565b92915050565b5f5f604083850312156134c9576134c8612e25565b5b5f6134d685828601612e73565b92505060206134e78582860161349f565b9150509250929050565b5f6020820190508181035f83015261350981846131f6565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f8601526135548282612f13565b9150506020830151613569602086018261336c565b50604083015161357c604086018261337b565b50606083015161358f606086018261337b565b508091505092915050565b5f6135a5838361353a565b905092915050565b5f602082019050919050565b5f6135c382613511565b6135cd818561351b565b9350836020820285016135df8561352b565b805f5b8581101561361a57848403895281516135fb858261359a565b9450613606836135ad565b925060208a019950506001810190506135e2565b50829750879550505050505092915050565b5f6020820190508181035f83015261364481846135b9565b905092915050565b5f5f5f6060848603121561366357613662612e25565b5b5f84013567ffffffffffffffff8111156136805761367f612e29565b5b61368c868287016130fc565b935050602084013567ffffffffffffffff8111156136ad576136ac612e29565b5b6136b9868287016130fc565b925050604084013567ffffffffffffffff8111156136da576136d9612e29565b5b6136e6868287016130fc565b9150509250925092565b5f6020828403121561370557613704612e25565b5b5f6137128482850161349f565b91505092915050565b5f6060820190508181035f83015261373381866131f6565b9050613742602083018561322e565b61374f6040830184613246565b949350505050565b5f6080820190508181035f83015261376f81876131f6565b905061377e602083018661322e565b61378b6040830185613246565b6137986060830184613246565b95945050505050565b5f8115159050919050565b6137b5816137a1565b82525050565b5f60e0820190508181035f8301526137d3818a6131f6565b905081810360208301526137e781896131f6565b905081810360408301526137fb81886131f6565b905061380a606083018761322e565b61381760808301866137ac565b61382460a0830185613246565b61383160c083018461322e565b98975050505050505050565b5f5f6040838503121561385357613852612e25565b5b5f83013567ffffffffffffffff8111156138705761386f612e29565b5b61387c858286016130fc565b925050602061388d8582860161349f565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6138cb838361336c565b60208301905092915050565b5f602082019050919050565b5f6138ed82613897565b6138f781856138a1565b9350613902836138b1565b805f5b8381101561393257815161391988826138c0565b9750613924836138d7565b925050600181019050613905565b5085935050505092915050565b5f610100820190508181035f830152613958818b6131f6565b9050613967602083018a61322e565b818103604083015261397981896131f6565b90506139886060830188613246565b6139956080830187613246565b6139a260a08301866132b9565b6139af60c083018561322e565b81810360e08301526139c181846138e3565b90509998505050505050505050565b6139d9816137a1565b81146139e3575f5ffd5b50565b5f813590506139f4816139d0565b92915050565b5f5f60408385031215613a1057613a0f612e25565b5b5f83013567ffffffffffffffff811115613a2d57613a2c612e29565b5b613a39858286016130fc565b9250506020613a4a858286016139e6565b9150509250929050565b5f5f5f60608486031215613a6b57613a6a612e25565b5b5f84013567ffffffffffffffff811115613a8857613a87612e29565b5b613a94868287016130fc565b9350506020613aa58682870161349f565b9250506040613ab68682870161349f565b9150509250925092565b5f60a0820190508181035f830152613ad881886131f6565b9050613ae7602083018761322e565b613af46040830186613246565b613b016060830185613246565b613b0e6080830184613246565b9695505050505050565b613b21816137a1565b82525050565b5f60e083015f8301518482035f860152613b418282612f13565b91505060208301518482036020860152613b5b8282612f13565b91505060408301518482036040860152613b758282612f13565b9150506060830151613b8a606086018261336c565b506080830151613b9d6080860182613b18565b5060a0830151613bb060a086018261337b565b5060c0830151613bc360c086018261336c565b508091505092915050565b5f6020820190508181035f830152613be68184613b27565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f60a083015f8301518482035f860152613c318282612f13565b9150506020830151613c46602086018261336c565b506040830151613c59604086018261337b565b506060830151613c6c606086018261337b565b506080830151613c7f608086018261337b565b508091505092915050565b5f613c958383613c17565b905092915050565b5f602082019050919050565b5f613cb382613bee565b613cbd8185613bf8565b935083602082028501613ccf85613c08565b805f5b85811015613d0a5784840389528151613ceb8582613c8a565b9450613cf683613c9d565b925060208a01995050600181019050613cd2565b50829750879550505050505092915050565b5f6020820190508181035f830152613d348184613ca9565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680613d8057607f821691505b602082108103613d9357613d92613d3c565b5b50919050565b5f81905092915050565b5f613dad82612edb565b613db78185613d99565b9350613dc7818560208601612ef5565b80840191505092915050565b5f613dde8284613da3565b915081905092915050565b7f506f73746f20696e6578697374656e74652e00000000000000000000000000005f82015250565b5f613e1d6012836131e6565b9150613e2882613de9565b602082019050919050565b5f6020820190508181035f830152613e4a81613e11565b9050919050565b7f4a612065786973746520646973707574612061626572746120706172612065735f8201527f746520706f73746f2e0000000000000000000000000000000000000000000000602082015250565b5f613eab6029836131e6565b9150613eb682613e51565b604082019050919050565b5f6020820190508181035f830152613ed881613e9f565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302613f3b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f00565b613f458683613f00565b95508019841693508086168417925050509392505050565b5f819050919050565b5f613f80613f7b613f768461323d565b613f5d565b61323d565b9050919050565b5f819050919050565b613f9983613f66565b613fad613fa582613f87565b848454613f0c565b825550505050565b5f5f905090565b613fc4613fb5565b613fcf818484613f90565b505050565b5b81811015613ff257613fe75f82613fbc565b600181019050613fd5565b5050565b601f8211156140375761400881613edf565b61401184613ef1565b81016020851015614020578190505b61403461402c85613ef1565b830182613fd4565b50505b505050565b5f82821c905092915050565b5f6140575f198460080261403c565b1980831691505092915050565b5f61406f8383614048565b9150826002028217905092915050565b61408882612edb565b67ffffffffffffffff8111156140a1576140a0613005565b5b6140ab8254613d69565b6140b6828285613ff6565b5f60209050601f8311600181146140e7575f84156140d5578287015190505b6140df8582614064565b865550614146565b601f1984166140f586613edf565b5f5b8281101561411c578489015182556001820191506020850194506020810190506140f7565b868310156141395784890151614135601f891682614048565b8355505b6001600288020188555050505b505050505050565b5f6060820190508181035f83015261416681866131f6565b9050614175602083018561322e565b818103604083015261418781846131f6565b9050949350505050565b7f506f73746f206a612072657365727661646f2e000000000000000000000000005f82015250565b5f6141c56013836131e6565b91506141d082614191565b602082019050919050565b5f6020820190508181035f8301526141f2816141b9565b9050919050565b7f506f73746f206a61206573746120646973706f6e6976656c2e000000000000005f82015250565b5f61422d6019836131e6565b9150614238826141f9565b602082019050919050565b5f6020820190508181035f83015261425a81614221565b9050919050565b7f4170656e6173206f2076656963756c6f20717565207265736572766f7520706f5f8201527f6465206c6962657261722e000000000000000000000000000000000000000000602082015250565b5f6142bb602b836131e6565b91506142c682614261565b604082019050919050565b5f6020820190508181035f8301526142e8816142af565b9050919050565b7f506f73746f206a61206361646173747261646f2e0000000000000000000000005f82015250565b5f6143236014836131e6565b915061432e826142ef565b602082019050919050565b5f6020820190508181035f83015261435081614317565b9050919050565b7f506f73746f20646576652065737461722072657365727661646f2e00000000005f82015250565b5f61438b601b836131e6565b915061439682614357565b602082019050919050565b5f6020820190508181035f8301526143b88161437f565b9050919050565b7f4170656e6173206f2076656963756c6f20717565207265736572766f7520706f5f8201527f64652070616761722e0000000000000000000000000000000000000000000000602082015250565b5f6144196029836131e6565b9150614424826143bf565b604082019050919050565b5f6020820190508181035f8301526144468161440d565b9050919050565b7f44697370757461206e616f2065737461206162657274612e00000000000000005f82015250565b5f6144816018836131e6565b915061448c8261444d565b602082019050919050565b5f6020820190508181035f8301526144ae81614475565b9050919050565b7f536f20656d70726573617320636f6d20706f73746f20706f64656d20766f74615f8201527f722e000000000000000000000000000000000000000000000000000000000000602082015250565b5f61450f6022836131e6565b915061451a826144b5565b604082019050919050565b5f6020820190508181035f83015261453c81614503565b9050919050565b7f456d7072657361206a6120766f746f75206e6573746120646973707574612e005f82015250565b5f614577601f836131e6565b915061458282614543565b602082019050919050565b5f6020820190508181035f8301526145a48161456b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6145e28261323d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614614576146136145ab565b5b600182019050919050565b5f6060820190508181035f83015261463781866131f6565b9050614646602083018561322e565b61465360408301846137ac565b949350505050565b7f4170656e6173206f2076656963756c6f20717565207265736572766f7520706f5f8201527f64652072656769737472617220726563617267612e0000000000000000000000602082015250565b5f6146b56035836131e6565b91506146c08261465b565b604082019050919050565b5f6020820190508181035f8301526146e2816146a9565b9050919050565b7f4e656e68756d20766f746f207265676973747261646f2e0000000000000000005f82015250565b5f61471d6017836131e6565b9150614728826146e9565b602082019050919050565b5f6020820190508181035f83015261474a81614711565b9050919050565b5f6040820190508181035f83015261476981856131f6565b9050614778602083018461322e565b939250505056fea264697066735822122093095cdbd10eee68726eec2b38fbc1f0aacfa8c462fb42df100485437da283dc64736f6c634300081e0033",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// ConsultarDisputa is a free data retrieval call binding the contract method 0xd0cf186e.
//
// Solidity: function consultarDisputa(string _idPosto) view returns(string idPosto, address empresaRequerente, string motivo, uint256 votosAFavor, uint256 votosContra, uint8 status, address vencedora, address[] votantes)
func (_Contracts *ContractsCaller) ConsultarDisputa(opts *bind.CallOpts, _idPosto string) (struct {
	IdPosto           string
	EmpresaRequerente common.Address
	Motivo            string
	VotosAFavor       *big.Int
	VotosContra       *big.Int
	Status            uint8
	Vencedora         common.Address
	Votantes          []common.Address
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "consultarDisputa", _idPosto)

	outstruct := new(struct {
		IdPosto           string
		EmpresaRequerente common.Address
		Motivo            string
		VotosAFavor       *big.Int
		VotosContra       *big.Int
		Status            uint8
		Vencedora         common.Address
		Votantes          []common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IdPosto = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.EmpresaRequerente = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Motivo = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.VotosAFavor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VotosContra = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[5], new(uint8)).(*uint8)
	outstruct.Vencedora = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.Votantes = *abi.ConvertType(out[7], new([]common.Address)).(*[]common.Address)

	return *outstruct, err

}

// ConsultarDisputa is a free data retrieval call binding the contract method 0xd0cf186e.
//
// Solidity: function consultarDisputa(string _idPosto) view returns(string idPosto, address empresaRequerente, string motivo, uint256 votosAFavor, uint256 votosContra, uint8 status, address vencedora, address[] votantes)
func (_Contracts *ContractsSession) ConsultarDisputa(_idPosto string) (struct {
	IdPosto           string
	EmpresaRequerente common.Address
	Motivo            string
	VotosAFavor       *big.Int
	VotosContra       *big.Int
	Status            uint8
	Vencedora         common.Address
	Votantes          []common.Address
}, error) {
	return _Contracts.Contract.ConsultarDisputa(&_Contracts.CallOpts, _idPosto)
}

// ConsultarDisputa is a free data retrieval call binding the contract method 0xd0cf186e.
//
// Solidity: function consultarDisputa(string _idPosto) view returns(string idPosto, address empresaRequerente, string motivo, uint256 votosAFavor, uint256 votosContra, uint8 status, address vencedora, address[] votantes)
func (_Contracts *ContractsCallerSession) ConsultarDisputa(_idPosto string) (struct {
	IdPosto           string
	EmpresaRequerente common.Address
	Motivo            string
	VotosAFavor       *big.Int
	VotosContra       *big.Int
	Status            uint8
	Vencedora         common.Address
	Votantes          []common.Address
}, error) {
	return _Contracts.Contract.ConsultarDisputa(&_Contracts.CallOpts, _idPosto)
}

// ConsultarHistoricoPagamentos is a free data retrieval call binding the contract method 0x7591ef80.
//
// Solidity: function consultarHistoricoPagamentos() view returns((string,address,uint256,uint256)[])
func (_Contracts *ContractsCaller) ConsultarHistoricoPagamentos(opts *bind.CallOpts) ([]GerenciadorPostosPagamento, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "consultarHistoricoPagamentos")

	if err != nil {
		return *new([]GerenciadorPostosPagamento), err
	}

	out0 := *abi.ConvertType(out[0], new([]GerenciadorPostosPagamento)).(*[]GerenciadorPostosPagamento)

	return out0, err

}

// ConsultarHistoricoPagamentos is a free data retrieval call binding the contract method 0x7591ef80.
//
// Solidity: function consultarHistoricoPagamentos() view returns((string,address,uint256,uint256)[])
func (_Contracts *ContractsSession) ConsultarHistoricoPagamentos() ([]GerenciadorPostosPagamento, error) {
	return _Contracts.Contract.ConsultarHistoricoPagamentos(&_Contracts.CallOpts)
}

// ConsultarHistoricoPagamentos is a free data retrieval call binding the contract method 0x7591ef80.
//
// Solidity: function consultarHistoricoPagamentos() view returns((string,address,uint256,uint256)[])
func (_Contracts *ContractsCallerSession) ConsultarHistoricoPagamentos() ([]GerenciadorPostosPagamento, error) {
	return _Contracts.Contract.ConsultarHistoricoPagamentos(&_Contracts.CallOpts)
}

// ConsultarHistoricoRecargas is a free data retrieval call binding the contract method 0xf86781bf.
//
// Solidity: function consultarHistoricoRecargas() view returns((string,address,uint256,uint256,uint256)[])
func (_Contracts *ContractsCaller) ConsultarHistoricoRecargas(opts *bind.CallOpts) ([]GerenciadorPostosRecarga, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "consultarHistoricoRecargas")

	if err != nil {
		return *new([]GerenciadorPostosRecarga), err
	}

	out0 := *abi.ConvertType(out[0], new([]GerenciadorPostosRecarga)).(*[]GerenciadorPostosRecarga)

	return out0, err

}

// ConsultarHistoricoRecargas is a free data retrieval call binding the contract method 0xf86781bf.
//
// Solidity: function consultarHistoricoRecargas() view returns((string,address,uint256,uint256,uint256)[])
func (_Contracts *ContractsSession) ConsultarHistoricoRecargas() ([]GerenciadorPostosRecarga, error) {
	return _Contracts.Contract.ConsultarHistoricoRecargas(&_Contracts.CallOpts)
}

// ConsultarHistoricoRecargas is a free data retrieval call binding the contract method 0xf86781bf.
//
// Solidity: function consultarHistoricoRecargas() view returns((string,address,uint256,uint256,uint256)[])
func (_Contracts *ContractsCallerSession) ConsultarHistoricoRecargas() ([]GerenciadorPostosRecarga, error) {
	return _Contracts.Contract.ConsultarHistoricoRecargas(&_Contracts.CallOpts)
}

// ConsultarHistoricoReservas is a free data retrieval call binding the contract method 0x316abb1f.
//
// Solidity: function consultarHistoricoReservas() view returns((string,address,uint256)[])
func (_Contracts *ContractsCaller) ConsultarHistoricoReservas(opts *bind.CallOpts) ([]GerenciadorPostosReserva, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "consultarHistoricoReservas")

	if err != nil {
		return *new([]GerenciadorPostosReserva), err
	}

	out0 := *abi.ConvertType(out[0], new([]GerenciadorPostosReserva)).(*[]GerenciadorPostosReserva)

	return out0, err

}

// ConsultarHistoricoReservas is a free data retrieval call binding the contract method 0x316abb1f.
//
// Solidity: function consultarHistoricoReservas() view returns((string,address,uint256)[])
func (_Contracts *ContractsSession) ConsultarHistoricoReservas() ([]GerenciadorPostosReserva, error) {
	return _Contracts.Contract.ConsultarHistoricoReservas(&_Contracts.CallOpts)
}

// ConsultarHistoricoReservas is a free data retrieval call binding the contract method 0x316abb1f.
//
// Solidity: function consultarHistoricoReservas() view returns((string,address,uint256)[])
func (_Contracts *ContractsCallerSession) ConsultarHistoricoReservas() ([]GerenciadorPostosReserva, error) {
	return _Contracts.Contract.ConsultarHistoricoReservas(&_Contracts.CallOpts)
}

// ConsultarPosto is a free data retrieval call binding the contract method 0xf840e7ed.
//
// Solidity: function consultarPosto(string _id) view returns((string,string,string,address,bool,uint256,address))
func (_Contracts *ContractsCaller) ConsultarPosto(opts *bind.CallOpts, _id string) (GerenciadorPostosPosto, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "consultarPosto", _id)

	if err != nil {
		return *new(GerenciadorPostosPosto), err
	}

	out0 := *abi.ConvertType(out[0], new(GerenciadorPostosPosto)).(*GerenciadorPostosPosto)

	return out0, err

}

// ConsultarPosto is a free data retrieval call binding the contract method 0xf840e7ed.
//
// Solidity: function consultarPosto(string _id) view returns((string,string,string,address,bool,uint256,address))
func (_Contracts *ContractsSession) ConsultarPosto(_id string) (GerenciadorPostosPosto, error) {
	return _Contracts.Contract.ConsultarPosto(&_Contracts.CallOpts, _id)
}

// ConsultarPosto is a free data retrieval call binding the contract method 0xf840e7ed.
//
// Solidity: function consultarPosto(string _id) view returns((string,string,string,address,bool,uint256,address))
func (_Contracts *ContractsCallerSession) ConsultarPosto(_id string) (GerenciadorPostosPosto, error) {
	return _Contracts.Contract.ConsultarPosto(&_Contracts.CallOpts, _id)
}

// ConsultarPostosPorEmpresa is a free data retrieval call binding the contract method 0x092622ec.
//
// Solidity: function consultarPostosPorEmpresa(address _empresa) view returns(string[])
func (_Contracts *ContractsCaller) ConsultarPostosPorEmpresa(opts *bind.CallOpts, _empresa common.Address) ([]string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "consultarPostosPorEmpresa", _empresa)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ConsultarPostosPorEmpresa is a free data retrieval call binding the contract method 0x092622ec.
//
// Solidity: function consultarPostosPorEmpresa(address _empresa) view returns(string[])
func (_Contracts *ContractsSession) ConsultarPostosPorEmpresa(_empresa common.Address) ([]string, error) {
	return _Contracts.Contract.ConsultarPostosPorEmpresa(&_Contracts.CallOpts, _empresa)
}

// ConsultarPostosPorEmpresa is a free data retrieval call binding the contract method 0x092622ec.
//
// Solidity: function consultarPostosPorEmpresa(address _empresa) view returns(string[])
func (_Contracts *ContractsCallerSession) ConsultarPostosPorEmpresa(_empresa common.Address) ([]string, error) {
	return _Contracts.Contract.ConsultarPostosPorEmpresa(&_Contracts.CallOpts, _empresa)
}

// ConsultarTodosPostos is a free data retrieval call binding the contract method 0xbb5f956f.
//
// Solidity: function consultarTodosPostos() view returns(string[])
func (_Contracts *ContractsCaller) ConsultarTodosPostos(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "consultarTodosPostos")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ConsultarTodosPostos is a free data retrieval call binding the contract method 0xbb5f956f.
//
// Solidity: function consultarTodosPostos() view returns(string[])
func (_Contracts *ContractsSession) ConsultarTodosPostos() ([]string, error) {
	return _Contracts.Contract.ConsultarTodosPostos(&_Contracts.CallOpts)
}

// ConsultarTodosPostos is a free data retrieval call binding the contract method 0xbb5f956f.
//
// Solidity: function consultarTodosPostos() view returns(string[])
func (_Contracts *ContractsCallerSession) ConsultarTodosPostos() ([]string, error) {
	return _Contracts.Contract.ConsultarTodosPostos(&_Contracts.CallOpts)
}

// Disputas is a free data retrieval call binding the contract method 0x31444b70.
//
// Solidity: function disputas(string ) view returns(string idPosto, address empresaRequerente, string motivo, uint256 votosAFavor, uint256 votosContra, uint8 status, address vencedora)
func (_Contracts *ContractsCaller) Disputas(opts *bind.CallOpts, arg0 string) (struct {
	IdPosto           string
	EmpresaRequerente common.Address
	Motivo            string
	VotosAFavor       *big.Int
	VotosContra       *big.Int
	Status            uint8
	Vencedora         common.Address
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "disputas", arg0)

	outstruct := new(struct {
		IdPosto           string
		EmpresaRequerente common.Address
		Motivo            string
		VotosAFavor       *big.Int
		VotosContra       *big.Int
		Status            uint8
		Vencedora         common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IdPosto = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.EmpresaRequerente = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Motivo = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.VotosAFavor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VotosContra = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[5], new(uint8)).(*uint8)
	outstruct.Vencedora = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Disputas is a free data retrieval call binding the contract method 0x31444b70.
//
// Solidity: function disputas(string ) view returns(string idPosto, address empresaRequerente, string motivo, uint256 votosAFavor, uint256 votosContra, uint8 status, address vencedora)
func (_Contracts *ContractsSession) Disputas(arg0 string) (struct {
	IdPosto           string
	EmpresaRequerente common.Address
	Motivo            string
	VotosAFavor       *big.Int
	VotosContra       *big.Int
	Status            uint8
	Vencedora         common.Address
}, error) {
	return _Contracts.Contract.Disputas(&_Contracts.CallOpts, arg0)
}

// Disputas is a free data retrieval call binding the contract method 0x31444b70.
//
// Solidity: function disputas(string ) view returns(string idPosto, address empresaRequerente, string motivo, uint256 votosAFavor, uint256 votosContra, uint8 status, address vencedora)
func (_Contracts *ContractsCallerSession) Disputas(arg0 string) (struct {
	IdPosto           string
	EmpresaRequerente common.Address
	Motivo            string
	VotosAFavor       *big.Int
	VotosContra       *big.Int
	Status            uint8
	Vencedora         common.Address
}, error) {
	return _Contracts.Contract.Disputas(&_Contracts.CallOpts, arg0)
}

// HistoricoPagamentos is a free data retrieval call binding the contract method 0x883ee61f.
//
// Solidity: function historicoPagamentos(uint256 ) view returns(string idPosto, address veiculo, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsCaller) HistoricoPagamentos(opts *bind.CallOpts, arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	Valor     *big.Int
	Timestamp *big.Int
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "historicoPagamentos", arg0)

	outstruct := new(struct {
		IdPosto   string
		Veiculo   common.Address
		Valor     *big.Int
		Timestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IdPosto = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Veiculo = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Valor = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// HistoricoPagamentos is a free data retrieval call binding the contract method 0x883ee61f.
//
// Solidity: function historicoPagamentos(uint256 ) view returns(string idPosto, address veiculo, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsSession) HistoricoPagamentos(arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	Valor     *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.HistoricoPagamentos(&_Contracts.CallOpts, arg0)
}

// HistoricoPagamentos is a free data retrieval call binding the contract method 0x883ee61f.
//
// Solidity: function historicoPagamentos(uint256 ) view returns(string idPosto, address veiculo, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsCallerSession) HistoricoPagamentos(arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	Valor     *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.HistoricoPagamentos(&_Contracts.CallOpts, arg0)
}

// HistoricoRecargas is a free data retrieval call binding the contract method 0xeb7dfb86.
//
// Solidity: function historicoRecargas(uint256 ) view returns(string idPosto, address veiculo, uint256 kWh, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsCaller) HistoricoRecargas(opts *bind.CallOpts, arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	KWh       *big.Int
	Valor     *big.Int
	Timestamp *big.Int
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "historicoRecargas", arg0)

	outstruct := new(struct {
		IdPosto   string
		Veiculo   common.Address
		KWh       *big.Int
		Valor     *big.Int
		Timestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IdPosto = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Veiculo = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.KWh = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Valor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// HistoricoRecargas is a free data retrieval call binding the contract method 0xeb7dfb86.
//
// Solidity: function historicoRecargas(uint256 ) view returns(string idPosto, address veiculo, uint256 kWh, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsSession) HistoricoRecargas(arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	KWh       *big.Int
	Valor     *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.HistoricoRecargas(&_Contracts.CallOpts, arg0)
}

// HistoricoRecargas is a free data retrieval call binding the contract method 0xeb7dfb86.
//
// Solidity: function historicoRecargas(uint256 ) view returns(string idPosto, address veiculo, uint256 kWh, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsCallerSession) HistoricoRecargas(arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	KWh       *big.Int
	Valor     *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.HistoricoRecargas(&_Contracts.CallOpts, arg0)
}

// HistoricoReservas is a free data retrieval call binding the contract method 0x87b7e50b.
//
// Solidity: function historicoReservas(uint256 ) view returns(string idPosto, address veiculo, uint256 timestamp)
func (_Contracts *ContractsCaller) HistoricoReservas(opts *bind.CallOpts, arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	Timestamp *big.Int
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "historicoReservas", arg0)

	outstruct := new(struct {
		IdPosto   string
		Veiculo   common.Address
		Timestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IdPosto = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Veiculo = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Timestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// HistoricoReservas is a free data retrieval call binding the contract method 0x87b7e50b.
//
// Solidity: function historicoReservas(uint256 ) view returns(string idPosto, address veiculo, uint256 timestamp)
func (_Contracts *ContractsSession) HistoricoReservas(arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.HistoricoReservas(&_Contracts.CallOpts, arg0)
}

// HistoricoReservas is a free data retrieval call binding the contract method 0x87b7e50b.
//
// Solidity: function historicoReservas(uint256 ) view returns(string idPosto, address veiculo, uint256 timestamp)
func (_Contracts *ContractsCallerSession) HistoricoReservas(arg0 *big.Int) (struct {
	IdPosto   string
	Veiculo   common.Address
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.HistoricoReservas(&_Contracts.CallOpts, arg0)
}

// ListaDisputas is a free data retrieval call binding the contract method 0xc74274c6.
//
// Solidity: function listaDisputas(uint256 ) view returns(string)
func (_Contracts *ContractsCaller) ListaDisputas(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "listaDisputas", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ListaDisputas is a free data retrieval call binding the contract method 0xc74274c6.
//
// Solidity: function listaDisputas(uint256 ) view returns(string)
func (_Contracts *ContractsSession) ListaDisputas(arg0 *big.Int) (string, error) {
	return _Contracts.Contract.ListaDisputas(&_Contracts.CallOpts, arg0)
}

// ListaDisputas is a free data retrieval call binding the contract method 0xc74274c6.
//
// Solidity: function listaDisputas(uint256 ) view returns(string)
func (_Contracts *ContractsCallerSession) ListaDisputas(arg0 *big.Int) (string, error) {
	return _Contracts.Contract.ListaDisputas(&_Contracts.CallOpts, arg0)
}

// ListaIdsPostos is a free data retrieval call binding the contract method 0x8b4aefc4.
//
// Solidity: function listaIdsPostos(uint256 ) view returns(string)
func (_Contracts *ContractsCaller) ListaIdsPostos(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "listaIdsPostos", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ListaIdsPostos is a free data retrieval call binding the contract method 0x8b4aefc4.
//
// Solidity: function listaIdsPostos(uint256 ) view returns(string)
func (_Contracts *ContractsSession) ListaIdsPostos(arg0 *big.Int) (string, error) {
	return _Contracts.Contract.ListaIdsPostos(&_Contracts.CallOpts, arg0)
}

// ListaIdsPostos is a free data retrieval call binding the contract method 0x8b4aefc4.
//
// Solidity: function listaIdsPostos(uint256 ) view returns(string)
func (_Contracts *ContractsCallerSession) ListaIdsPostos(arg0 *big.Int) (string, error) {
	return _Contracts.Contract.ListaIdsPostos(&_Contracts.CallOpts, arg0)
}

// Postos is a free data retrieval call binding the contract method 0xb6447c49.
//
// Solidity: function postos(string ) view returns(string id, string nome, string cidade, address proprietario, bool disponivel, uint256 ultimaAtualizacao, address veiculoReservador)
func (_Contracts *ContractsCaller) Postos(opts *bind.CallOpts, arg0 string) (struct {
	Id                string
	Nome              string
	Cidade            string
	Proprietario      common.Address
	Disponivel        bool
	UltimaAtualizacao *big.Int
	VeiculoReservador common.Address
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "postos", arg0)

	outstruct := new(struct {
		Id                string
		Nome              string
		Cidade            string
		Proprietario      common.Address
		Disponivel        bool
		UltimaAtualizacao *big.Int
		VeiculoReservador common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Nome = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Cidade = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Proprietario = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Disponivel = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.UltimaAtualizacao = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.VeiculoReservador = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Postos is a free data retrieval call binding the contract method 0xb6447c49.
//
// Solidity: function postos(string ) view returns(string id, string nome, string cidade, address proprietario, bool disponivel, uint256 ultimaAtualizacao, address veiculoReservador)
func (_Contracts *ContractsSession) Postos(arg0 string) (struct {
	Id                string
	Nome              string
	Cidade            string
	Proprietario      common.Address
	Disponivel        bool
	UltimaAtualizacao *big.Int
	VeiculoReservador common.Address
}, error) {
	return _Contracts.Contract.Postos(&_Contracts.CallOpts, arg0)
}

// Postos is a free data retrieval call binding the contract method 0xb6447c49.
//
// Solidity: function postos(string ) view returns(string id, string nome, string cidade, address proprietario, bool disponivel, uint256 ultimaAtualizacao, address veiculoReservador)
func (_Contracts *ContractsCallerSession) Postos(arg0 string) (struct {
	Id                string
	Nome              string
	Cidade            string
	Proprietario      common.Address
	Disponivel        bool
	UltimaAtualizacao *big.Int
	VeiculoReservador common.Address
}, error) {
	return _Contracts.Contract.Postos(&_Contracts.CallOpts, arg0)
}

// PostosPorEmpresa is a free data retrieval call binding the contract method 0x62c1621b.
//
// Solidity: function postosPorEmpresa(address , uint256 ) view returns(string)
func (_Contracts *ContractsCaller) PostosPorEmpresa(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (string, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "postosPorEmpresa", arg0, arg1)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// PostosPorEmpresa is a free data retrieval call binding the contract method 0x62c1621b.
//
// Solidity: function postosPorEmpresa(address , uint256 ) view returns(string)
func (_Contracts *ContractsSession) PostosPorEmpresa(arg0 common.Address, arg1 *big.Int) (string, error) {
	return _Contracts.Contract.PostosPorEmpresa(&_Contracts.CallOpts, arg0, arg1)
}

// PostosPorEmpresa is a free data retrieval call binding the contract method 0x62c1621b.
//
// Solidity: function postosPorEmpresa(address , uint256 ) view returns(string)
func (_Contracts *ContractsCallerSession) PostosPorEmpresa(arg0 common.Address, arg1 *big.Int) (string, error) {
	return _Contracts.Contract.PostosPorEmpresa(&_Contracts.CallOpts, arg0, arg1)
}

// AbrirDisputa is a paid mutator transaction binding the contract method 0x1f4d270f.
//
// Solidity: function abrirDisputa(string _idPosto, string _motivo) returns()
func (_Contracts *ContractsTransactor) AbrirDisputa(opts *bind.TransactOpts, _idPosto string, _motivo string) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "abrirDisputa", _idPosto, _motivo)
}

// AbrirDisputa is a paid mutator transaction binding the contract method 0x1f4d270f.
//
// Solidity: function abrirDisputa(string _idPosto, string _motivo) returns()
func (_Contracts *ContractsSession) AbrirDisputa(_idPosto string, _motivo string) (*types.Transaction, error) {
	return _Contracts.Contract.AbrirDisputa(&_Contracts.TransactOpts, _idPosto, _motivo)
}

// AbrirDisputa is a paid mutator transaction binding the contract method 0x1f4d270f.
//
// Solidity: function abrirDisputa(string _idPosto, string _motivo) returns()
func (_Contracts *ContractsTransactorSession) AbrirDisputa(_idPosto string, _motivo string) (*types.Transaction, error) {
	return _Contracts.Contract.AbrirDisputa(&_Contracts.TransactOpts, _idPosto, _motivo)
}

// CadastrarPosto is a paid mutator transaction binding the contract method 0x83acafd9.
//
// Solidity: function cadastrarPosto(string _id, string _nome, string _cidade) returns()
func (_Contracts *ContractsTransactor) CadastrarPosto(opts *bind.TransactOpts, _id string, _nome string, _cidade string) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "cadastrarPosto", _id, _nome, _cidade)
}

// CadastrarPosto is a paid mutator transaction binding the contract method 0x83acafd9.
//
// Solidity: function cadastrarPosto(string _id, string _nome, string _cidade) returns()
func (_Contracts *ContractsSession) CadastrarPosto(_id string, _nome string, _cidade string) (*types.Transaction, error) {
	return _Contracts.Contract.CadastrarPosto(&_Contracts.TransactOpts, _id, _nome, _cidade)
}

// CadastrarPosto is a paid mutator transaction binding the contract method 0x83acafd9.
//
// Solidity: function cadastrarPosto(string _id, string _nome, string _cidade) returns()
func (_Contracts *ContractsTransactorSession) CadastrarPosto(_id string, _nome string, _cidade string) (*types.Transaction, error) {
	return _Contracts.Contract.CadastrarPosto(&_Contracts.TransactOpts, _id, _nome, _cidade)
}

// LiberarPosto is a paid mutator transaction binding the contract method 0x7ffbced5.
//
// Solidity: function liberarPosto(string _id) returns()
func (_Contracts *ContractsTransactor) LiberarPosto(opts *bind.TransactOpts, _id string) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "liberarPosto", _id)
}

// LiberarPosto is a paid mutator transaction binding the contract method 0x7ffbced5.
//
// Solidity: function liberarPosto(string _id) returns()
func (_Contracts *ContractsSession) LiberarPosto(_id string) (*types.Transaction, error) {
	return _Contracts.Contract.LiberarPosto(&_Contracts.TransactOpts, _id)
}

// LiberarPosto is a paid mutator transaction binding the contract method 0x7ffbced5.
//
// Solidity: function liberarPosto(string _id) returns()
func (_Contracts *ContractsTransactorSession) LiberarPosto(_id string) (*types.Transaction, error) {
	return _Contracts.Contract.LiberarPosto(&_Contracts.TransactOpts, _id)
}

// RegistrarPagamento is a paid mutator transaction binding the contract method 0xc1c8b6fc.
//
// Solidity: function registrarPagamento(string _id, uint256 _valor) returns()
func (_Contracts *ContractsTransactor) RegistrarPagamento(opts *bind.TransactOpts, _id string, _valor *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "registrarPagamento", _id, _valor)
}

// RegistrarPagamento is a paid mutator transaction binding the contract method 0xc1c8b6fc.
//
// Solidity: function registrarPagamento(string _id, uint256 _valor) returns()
func (_Contracts *ContractsSession) RegistrarPagamento(_id string, _valor *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.RegistrarPagamento(&_Contracts.TransactOpts, _id, _valor)
}

// RegistrarPagamento is a paid mutator transaction binding the contract method 0xc1c8b6fc.
//
// Solidity: function registrarPagamento(string _id, uint256 _valor) returns()
func (_Contracts *ContractsTransactorSession) RegistrarPagamento(_id string, _valor *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.RegistrarPagamento(&_Contracts.TransactOpts, _id, _valor)
}

// RegistrarRecarga is a paid mutator transaction binding the contract method 0xdad52499.
//
// Solidity: function registrarRecarga(string _id, uint256 _kWh, uint256 _valor) returns()
func (_Contracts *ContractsTransactor) RegistrarRecarga(opts *bind.TransactOpts, _id string, _kWh *big.Int, _valor *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "registrarRecarga", _id, _kWh, _valor)
}

// RegistrarRecarga is a paid mutator transaction binding the contract method 0xdad52499.
//
// Solidity: function registrarRecarga(string _id, uint256 _kWh, uint256 _valor) returns()
func (_Contracts *ContractsSession) RegistrarRecarga(_id string, _kWh *big.Int, _valor *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.RegistrarRecarga(&_Contracts.TransactOpts, _id, _kWh, _valor)
}

// RegistrarRecarga is a paid mutator transaction binding the contract method 0xdad52499.
//
// Solidity: function registrarRecarga(string _id, uint256 _kWh, uint256 _valor) returns()
func (_Contracts *ContractsTransactorSession) RegistrarRecarga(_id string, _kWh *big.Int, _valor *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.RegistrarRecarga(&_Contracts.TransactOpts, _id, _kWh, _valor)
}

// ReservarPosto is a paid mutator transaction binding the contract method 0x43b0c1bf.
//
// Solidity: function reservarPosto(string _id) returns()
func (_Contracts *ContractsTransactor) ReservarPosto(opts *bind.TransactOpts, _id string) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "reservarPosto", _id)
}

// ReservarPosto is a paid mutator transaction binding the contract method 0x43b0c1bf.
//
// Solidity: function reservarPosto(string _id) returns()
func (_Contracts *ContractsSession) ReservarPosto(_id string) (*types.Transaction, error) {
	return _Contracts.Contract.ReservarPosto(&_Contracts.TransactOpts, _id)
}

// ReservarPosto is a paid mutator transaction binding the contract method 0x43b0c1bf.
//
// Solidity: function reservarPosto(string _id) returns()
func (_Contracts *ContractsTransactorSession) ReservarPosto(_id string) (*types.Transaction, error) {
	return _Contracts.Contract.ReservarPosto(&_Contracts.TransactOpts, _id)
}

// ResolverDisputa is a paid mutator transaction binding the contract method 0xf5038c4c.
//
// Solidity: function resolverDisputa(string _idPosto) returns()
func (_Contracts *ContractsTransactor) ResolverDisputa(opts *bind.TransactOpts, _idPosto string) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "resolverDisputa", _idPosto)
}

// ResolverDisputa is a paid mutator transaction binding the contract method 0xf5038c4c.
//
// Solidity: function resolverDisputa(string _idPosto) returns()
func (_Contracts *ContractsSession) ResolverDisputa(_idPosto string) (*types.Transaction, error) {
	return _Contracts.Contract.ResolverDisputa(&_Contracts.TransactOpts, _idPosto)
}

// ResolverDisputa is a paid mutator transaction binding the contract method 0xf5038c4c.
//
// Solidity: function resolverDisputa(string _idPosto) returns()
func (_Contracts *ContractsTransactorSession) ResolverDisputa(_idPosto string) (*types.Transaction, error) {
	return _Contracts.Contract.ResolverDisputa(&_Contracts.TransactOpts, _idPosto)
}

// VotarDisputa is a paid mutator transaction binding the contract method 0xd2db16ea.
//
// Solidity: function votarDisputa(string _idPosto, bool aFavor) returns()
func (_Contracts *ContractsTransactor) VotarDisputa(opts *bind.TransactOpts, _idPosto string, aFavor bool) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "votarDisputa", _idPosto, aFavor)
}

// VotarDisputa is a paid mutator transaction binding the contract method 0xd2db16ea.
//
// Solidity: function votarDisputa(string _idPosto, bool aFavor) returns()
func (_Contracts *ContractsSession) VotarDisputa(_idPosto string, aFavor bool) (*types.Transaction, error) {
	return _Contracts.Contract.VotarDisputa(&_Contracts.TransactOpts, _idPosto, aFavor)
}

// VotarDisputa is a paid mutator transaction binding the contract method 0xd2db16ea.
//
// Solidity: function votarDisputa(string _idPosto, bool aFavor) returns()
func (_Contracts *ContractsTransactorSession) VotarDisputa(_idPosto string, aFavor bool) (*types.Transaction, error) {
	return _Contracts.Contract.VotarDisputa(&_Contracts.TransactOpts, _idPosto, aFavor)
}

// ContractsDisputaAbertaIterator is returned from FilterDisputaAberta and is used to iterate over the raw logs and unpacked data for DisputaAberta events raised by the Contracts contract.
type ContractsDisputaAbertaIterator struct {
	Event *ContractsDisputaAberta // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsDisputaAbertaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsDisputaAberta)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsDisputaAberta)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsDisputaAbertaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsDisputaAbertaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsDisputaAberta represents a DisputaAberta event raised by the Contracts contract.
type ContractsDisputaAberta struct {
	IdPosto string
	Empresa common.Address
	Motivo  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDisputaAberta is a free log retrieval operation binding the contract event 0x3406be2b10f8255da09d553edbbb31f9b76da2fd745f766bfb8cba24b42b02f8.
//
// Solidity: event DisputaAberta(string idPosto, address empresa, string motivo)
func (_Contracts *ContractsFilterer) FilterDisputaAberta(opts *bind.FilterOpts) (*ContractsDisputaAbertaIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "DisputaAberta")
	if err != nil {
		return nil, err
	}
	return &ContractsDisputaAbertaIterator{contract: _Contracts.contract, event: "DisputaAberta", logs: logs, sub: sub}, nil
}

// WatchDisputaAberta is a free log subscription operation binding the contract event 0x3406be2b10f8255da09d553edbbb31f9b76da2fd745f766bfb8cba24b42b02f8.
//
// Solidity: event DisputaAberta(string idPosto, address empresa, string motivo)
func (_Contracts *ContractsFilterer) WatchDisputaAberta(opts *bind.WatchOpts, sink chan<- *ContractsDisputaAberta) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "DisputaAberta")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsDisputaAberta)
				if err := _Contracts.contract.UnpackLog(event, "DisputaAberta", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputaAberta is a log parse operation binding the contract event 0x3406be2b10f8255da09d553edbbb31f9b76da2fd745f766bfb8cba24b42b02f8.
//
// Solidity: event DisputaAberta(string idPosto, address empresa, string motivo)
func (_Contracts *ContractsFilterer) ParseDisputaAberta(log types.Log) (*ContractsDisputaAberta, error) {
	event := new(ContractsDisputaAberta)
	if err := _Contracts.contract.UnpackLog(event, "DisputaAberta", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsDisputaResolvidaIterator is returned from FilterDisputaResolvida and is used to iterate over the raw logs and unpacked data for DisputaResolvida events raised by the Contracts contract.
type ContractsDisputaResolvidaIterator struct {
	Event *ContractsDisputaResolvida // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsDisputaResolvidaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsDisputaResolvida)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsDisputaResolvida)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsDisputaResolvidaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsDisputaResolvidaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsDisputaResolvida represents a DisputaResolvida event raised by the Contracts contract.
type ContractsDisputaResolvida struct {
	IdPosto   string
	Vencedora common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDisputaResolvida is a free log retrieval operation binding the contract event 0x5dfcf6fccb13b5f3c9ed40212994cba89bf89f46cdd3b4a7f45e7e45e673700e.
//
// Solidity: event DisputaResolvida(string idPosto, address vencedora)
func (_Contracts *ContractsFilterer) FilterDisputaResolvida(opts *bind.FilterOpts) (*ContractsDisputaResolvidaIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "DisputaResolvida")
	if err != nil {
		return nil, err
	}
	return &ContractsDisputaResolvidaIterator{contract: _Contracts.contract, event: "DisputaResolvida", logs: logs, sub: sub}, nil
}

// WatchDisputaResolvida is a free log subscription operation binding the contract event 0x5dfcf6fccb13b5f3c9ed40212994cba89bf89f46cdd3b4a7f45e7e45e673700e.
//
// Solidity: event DisputaResolvida(string idPosto, address vencedora)
func (_Contracts *ContractsFilterer) WatchDisputaResolvida(opts *bind.WatchOpts, sink chan<- *ContractsDisputaResolvida) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "DisputaResolvida")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsDisputaResolvida)
				if err := _Contracts.contract.UnpackLog(event, "DisputaResolvida", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisputaResolvida is a log parse operation binding the contract event 0x5dfcf6fccb13b5f3c9ed40212994cba89bf89f46cdd3b4a7f45e7e45e673700e.
//
// Solidity: event DisputaResolvida(string idPosto, address vencedora)
func (_Contracts *ContractsFilterer) ParseDisputaResolvida(log types.Log) (*ContractsDisputaResolvida, error) {
	event := new(ContractsDisputaResolvida)
	if err := _Contracts.contract.UnpackLog(event, "DisputaResolvida", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPagamentoEfetuadoIterator is returned from FilterPagamentoEfetuado and is used to iterate over the raw logs and unpacked data for PagamentoEfetuado events raised by the Contracts contract.
type ContractsPagamentoEfetuadoIterator struct {
	Event *ContractsPagamentoEfetuado // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPagamentoEfetuadoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPagamentoEfetuado)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPagamentoEfetuado)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPagamentoEfetuadoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPagamentoEfetuadoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPagamentoEfetuado represents a PagamentoEfetuado event raised by the Contracts contract.
type ContractsPagamentoEfetuado struct {
	IdPosto   string
	Veiculo   common.Address
	Valor     *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPagamentoEfetuado is a free log retrieval operation binding the contract event 0xf2df8d701c4e00f65e958e83eddd065bee4955ef3901c23a55841fbac1603673.
//
// Solidity: event PagamentoEfetuado(string idPosto, address veiculo, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsFilterer) FilterPagamentoEfetuado(opts *bind.FilterOpts) (*ContractsPagamentoEfetuadoIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PagamentoEfetuado")
	if err != nil {
		return nil, err
	}
	return &ContractsPagamentoEfetuadoIterator{contract: _Contracts.contract, event: "PagamentoEfetuado", logs: logs, sub: sub}, nil
}

// WatchPagamentoEfetuado is a free log subscription operation binding the contract event 0xf2df8d701c4e00f65e958e83eddd065bee4955ef3901c23a55841fbac1603673.
//
// Solidity: event PagamentoEfetuado(string idPosto, address veiculo, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsFilterer) WatchPagamentoEfetuado(opts *bind.WatchOpts, sink chan<- *ContractsPagamentoEfetuado) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PagamentoEfetuado")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPagamentoEfetuado)
				if err := _Contracts.contract.UnpackLog(event, "PagamentoEfetuado", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePagamentoEfetuado is a log parse operation binding the contract event 0xf2df8d701c4e00f65e958e83eddd065bee4955ef3901c23a55841fbac1603673.
//
// Solidity: event PagamentoEfetuado(string idPosto, address veiculo, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsFilterer) ParsePagamentoEfetuado(log types.Log) (*ContractsPagamentoEfetuado, error) {
	event := new(ContractsPagamentoEfetuado)
	if err := _Contracts.contract.UnpackLog(event, "PagamentoEfetuado", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPostoCadastradoIterator is returned from FilterPostoCadastrado and is used to iterate over the raw logs and unpacked data for PostoCadastrado events raised by the Contracts contract.
type ContractsPostoCadastradoIterator struct {
	Event *ContractsPostoCadastrado // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPostoCadastradoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPostoCadastrado)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPostoCadastrado)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPostoCadastradoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPostoCadastradoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPostoCadastrado represents a PostoCadastrado event raised by the Contracts contract.
type ContractsPostoCadastrado struct {
	IdPosto      string
	Proprietario common.Address
	Cidade       string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterPostoCadastrado is a free log retrieval operation binding the contract event 0x2dcdb6b8b883bf6620c7713e0471005e041dc64c299618596a0b98c32f8e3eff.
//
// Solidity: event PostoCadastrado(string idPosto, address proprietario, string cidade)
func (_Contracts *ContractsFilterer) FilterPostoCadastrado(opts *bind.FilterOpts) (*ContractsPostoCadastradoIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PostoCadastrado")
	if err != nil {
		return nil, err
	}
	return &ContractsPostoCadastradoIterator{contract: _Contracts.contract, event: "PostoCadastrado", logs: logs, sub: sub}, nil
}

// WatchPostoCadastrado is a free log subscription operation binding the contract event 0x2dcdb6b8b883bf6620c7713e0471005e041dc64c299618596a0b98c32f8e3eff.
//
// Solidity: event PostoCadastrado(string idPosto, address proprietario, string cidade)
func (_Contracts *ContractsFilterer) WatchPostoCadastrado(opts *bind.WatchOpts, sink chan<- *ContractsPostoCadastrado) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PostoCadastrado")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPostoCadastrado)
				if err := _Contracts.contract.UnpackLog(event, "PostoCadastrado", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePostoCadastrado is a log parse operation binding the contract event 0x2dcdb6b8b883bf6620c7713e0471005e041dc64c299618596a0b98c32f8e3eff.
//
// Solidity: event PostoCadastrado(string idPosto, address proprietario, string cidade)
func (_Contracts *ContractsFilterer) ParsePostoCadastrado(log types.Log) (*ContractsPostoCadastrado, error) {
	event := new(ContractsPostoCadastrado)
	if err := _Contracts.contract.UnpackLog(event, "PostoCadastrado", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsRecargaEfetuadaIterator is returned from FilterRecargaEfetuada and is used to iterate over the raw logs and unpacked data for RecargaEfetuada events raised by the Contracts contract.
type ContractsRecargaEfetuadaIterator struct {
	Event *ContractsRecargaEfetuada // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsRecargaEfetuadaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsRecargaEfetuada)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsRecargaEfetuada)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsRecargaEfetuadaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsRecargaEfetuadaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsRecargaEfetuada represents a RecargaEfetuada event raised by the Contracts contract.
type ContractsRecargaEfetuada struct {
	IdPosto   string
	Veiculo   common.Address
	KWh       *big.Int
	Valor     *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRecargaEfetuada is a free log retrieval operation binding the contract event 0x796c3a4cbcc3d6ac47dc3f1886fb70e97b9a38e42bf7e9ca31a7e355d62ef9e5.
//
// Solidity: event RecargaEfetuada(string idPosto, address veiculo, uint256 kWh, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsFilterer) FilterRecargaEfetuada(opts *bind.FilterOpts) (*ContractsRecargaEfetuadaIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "RecargaEfetuada")
	if err != nil {
		return nil, err
	}
	return &ContractsRecargaEfetuadaIterator{contract: _Contracts.contract, event: "RecargaEfetuada", logs: logs, sub: sub}, nil
}

// WatchRecargaEfetuada is a free log subscription operation binding the contract event 0x796c3a4cbcc3d6ac47dc3f1886fb70e97b9a38e42bf7e9ca31a7e355d62ef9e5.
//
// Solidity: event RecargaEfetuada(string idPosto, address veiculo, uint256 kWh, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsFilterer) WatchRecargaEfetuada(opts *bind.WatchOpts, sink chan<- *ContractsRecargaEfetuada) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "RecargaEfetuada")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsRecargaEfetuada)
				if err := _Contracts.contract.UnpackLog(event, "RecargaEfetuada", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecargaEfetuada is a log parse operation binding the contract event 0x796c3a4cbcc3d6ac47dc3f1886fb70e97b9a38e42bf7e9ca31a7e355d62ef9e5.
//
// Solidity: event RecargaEfetuada(string idPosto, address veiculo, uint256 kWh, uint256 valor, uint256 timestamp)
func (_Contracts *ContractsFilterer) ParseRecargaEfetuada(log types.Log) (*ContractsRecargaEfetuada, error) {
	event := new(ContractsRecargaEfetuada)
	if err := _Contracts.contract.UnpackLog(event, "RecargaEfetuada", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsReservaEfetuadaIterator is returned from FilterReservaEfetuada and is used to iterate over the raw logs and unpacked data for ReservaEfetuada events raised by the Contracts contract.
type ContractsReservaEfetuadaIterator struct {
	Event *ContractsReservaEfetuada // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsReservaEfetuadaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsReservaEfetuada)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsReservaEfetuada)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsReservaEfetuadaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsReservaEfetuadaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsReservaEfetuada represents a ReservaEfetuada event raised by the Contracts contract.
type ContractsReservaEfetuada struct {
	IdPosto   string
	Veiculo   common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterReservaEfetuada is a free log retrieval operation binding the contract event 0x5e6a0be3baaa655cb9a65db88f036775a36c113ca096aabba02559a148e13568.
//
// Solidity: event ReservaEfetuada(string idPosto, address veiculo, uint256 timestamp)
func (_Contracts *ContractsFilterer) FilterReservaEfetuada(opts *bind.FilterOpts) (*ContractsReservaEfetuadaIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "ReservaEfetuada")
	if err != nil {
		return nil, err
	}
	return &ContractsReservaEfetuadaIterator{contract: _Contracts.contract, event: "ReservaEfetuada", logs: logs, sub: sub}, nil
}

// WatchReservaEfetuada is a free log subscription operation binding the contract event 0x5e6a0be3baaa655cb9a65db88f036775a36c113ca096aabba02559a148e13568.
//
// Solidity: event ReservaEfetuada(string idPosto, address veiculo, uint256 timestamp)
func (_Contracts *ContractsFilterer) WatchReservaEfetuada(opts *bind.WatchOpts, sink chan<- *ContractsReservaEfetuada) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "ReservaEfetuada")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsReservaEfetuada)
				if err := _Contracts.contract.UnpackLog(event, "ReservaEfetuada", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReservaEfetuada is a log parse operation binding the contract event 0x5e6a0be3baaa655cb9a65db88f036775a36c113ca096aabba02559a148e13568.
//
// Solidity: event ReservaEfetuada(string idPosto, address veiculo, uint256 timestamp)
func (_Contracts *ContractsFilterer) ParseReservaEfetuada(log types.Log) (*ContractsReservaEfetuada, error) {
	event := new(ContractsReservaEfetuada)
	if err := _Contracts.contract.UnpackLog(event, "ReservaEfetuada", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsVotoRegistradoIterator is returned from FilterVotoRegistrado and is used to iterate over the raw logs and unpacked data for VotoRegistrado events raised by the Contracts contract.
type ContractsVotoRegistradoIterator struct {
	Event *ContractsVotoRegistrado // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsVotoRegistradoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsVotoRegistrado)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsVotoRegistrado)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsVotoRegistradoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsVotoRegistradoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsVotoRegistrado represents a VotoRegistrado event raised by the Contracts contract.
type ContractsVotoRegistrado struct {
	IdPosto string
	Empresa common.Address
	AFavor  bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterVotoRegistrado is a free log retrieval operation binding the contract event 0xf0c5fd6052921978ad64f5282f7ca2d5e533f64f2850471e28c1db8291409e10.
//
// Solidity: event VotoRegistrado(string idPosto, address empresa, bool aFavor)
func (_Contracts *ContractsFilterer) FilterVotoRegistrado(opts *bind.FilterOpts) (*ContractsVotoRegistradoIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "VotoRegistrado")
	if err != nil {
		return nil, err
	}
	return &ContractsVotoRegistradoIterator{contract: _Contracts.contract, event: "VotoRegistrado", logs: logs, sub: sub}, nil
}

// WatchVotoRegistrado is a free log subscription operation binding the contract event 0xf0c5fd6052921978ad64f5282f7ca2d5e533f64f2850471e28c1db8291409e10.
//
// Solidity: event VotoRegistrado(string idPosto, address empresa, bool aFavor)
func (_Contracts *ContractsFilterer) WatchVotoRegistrado(opts *bind.WatchOpts, sink chan<- *ContractsVotoRegistrado) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "VotoRegistrado")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsVotoRegistrado)
				if err := _Contracts.contract.UnpackLog(event, "VotoRegistrado", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVotoRegistrado is a log parse operation binding the contract event 0xf0c5fd6052921978ad64f5282f7ca2d5e533f64f2850471e28c1db8291409e10.
//
// Solidity: event VotoRegistrado(string idPosto, address empresa, bool aFavor)
func (_Contracts *ContractsFilterer) ParseVotoRegistrado(log types.Log) (*ContractsVotoRegistrado, error) {
	event := new(ContractsVotoRegistrado)
	if err := _Contracts.contract.UnpackLog(event, "VotoRegistrado", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
